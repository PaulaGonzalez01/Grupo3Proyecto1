package registroharrypotter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Planificador {
    
    Scanner sc= new Scanner(System.in);
    ArrayList<String> lista_materias = new ArrayList<>();
    ArrayList<String> lista_profesores = new ArrayList<>();
    ArrayList <Estudiante> lista_estudiantes= new ArrayList<>(); 
    
    String usuario;
    String contraseña;
   
    
    static File FileCursos = new File ("Cursos.txt");
    static File FileUsuarios = new File ("Usuarios.txt");
    static File FileProfesores = new File ("Profesores.txt");
    static File FileEstudiantes = new File ("Estudiantes.txt");
    
    
    
    public Planificador(String usuario, String contraseña) throws IOException {
        
        this.usuario = usuario;
        this.contraseña = contraseña;
        //¿No se agregarían las materias de nuevo cada vez que cree un Planificador?
        lista_materias.add("Pociones");
        lista_materias.add("Defensa contra las artes oscuras");
        lista_materias.add("Adivinación");
        lista_materias.add("Astronomía");
        lista_materias.add("Historia de la Magia");
        lista_materias.add("Herbología");
        lista_materias.add("Encantamientos");
        lista_materias.add("Vuelo");
    }
    
    public void ImprimirMenuPrincipal(){
        System.out.println("/** MENU PRINCIPAL **/");
        System.out.println("1. Crear curso");
        System.out.println("2. Crear Profesor");
        System.out.println("3. Crear Estudiante");
        System.out.println("4. Ver horarios planificados");
        System.out.println("5. Listado de estudiantes");
    }
    
    
    //Imprimir el listado de profesores registrados en el archivo y guardados en arrayList
    public void ImprimirProfesores(){
        String parte;
        
        for (int x = 0; x < lista_profesores.size(); x++){
            parte = lista_profesores.get(x);
            System.out.println((x+1)+". "+parte);
        }
    }
    
    //Imprimir el listado de materias
    public void ImprimirMaterias(){
        String m;
        
        for (int x = 0; x < lista_materias.size(); x++){
            m = lista_materias.get(x);
            System.out.println((x+1)+". "+m);
        }
    }
    
    
    
    
    
    public void CrearCurso() throws FileNotFoundException, IOException {
        String op_crear = "";
        int capacidad = 0;
        String dia = "";
        String horario = "";
        String materia_ = "";
        String profesor_ = "";

        while (op_crear != "S") {
            int op_curso;
            int op_profesor;

            String validar = null;
            while (validar == null) {
                System.out.println("/** MATERIAS **/\n");
                ImprimirMaterias(); //aplicando método para imprimir materias
                System.out.println("Elija una materia del listado de materias: ");
                op_curso = sc.nextInt();

                while ((op_curso > 9) || (op_curso < 1)) {
                    System.out.println("Elija una materia valida del listado de materias: ");
                    op_curso = sc.nextInt();
                }

                System.out.println("/** PROFESORES **/\n");
                ImprimirProfesores(); //aplicando el método para imprimir los maestros
                System.out.println("Elija un profesor del listado de profesores: ");
                op_profesor = sc.nextInt();

                while ((op_profesor < 1) || (op_profesor > lista_profesores.size())) {
                    System.out.println("Elija un profesor valido del listado de profesores: ");
                    op_profesor = sc.nextInt();
                }

                //como se conoce la opcion ya sabemos la posicion de la variable en el arrayList
                profesor_ = lista_profesores.get(op_profesor - 1);
                materia_ = lista_materias.get(op_curso - 1);

                System.out.println("Ingrese la capacidad del curso " + materia_ + ": ");
                capacidad = sc.nextInt();
                System.out.println("Ingrese el dia: ");
                dia = sc.nextLine();
                System.out.println("Ingrese el horario del curso: ");
                horario = sc.nextLine();

                String nuevo_registro = materia_ + "," + profesor_ + "," + dia + "," + horario + "," + capacidad;

                //Validación de si no se repite materia, dia, horario
                
                try {
                    FileReader leer = new FileReader(FileCursos);
                    FileWriter escribir = new FileWriter(FileCursos);
                    BufferedReader line = new BufferedReader(leer);

                    while (line.ready()) {
                        String partes[] = line.readLine().split(",");
                        String p_materia = partes[0];
                        String p_dia = partes[1];
                        String p_horario = partes[2];

                        if (p_materia.equals(materia_) && p_dia.equals(dia) && p_horario.equals(horario)) {
                            System.out.println("No se encuentra disponible el horario ingresado");
                            System.out.println("Vuelva a intentarlo");
                            validar = null;
                        } else {
                            escribir.write(nuevo_registro);
                            validar = "s";
                            
                        }
                    }
                    leer.close();
                    escribir.close();

                } catch (IOException e) {System.out.println("Error");}
            }
            //Condición del while externo
            System.out.println("Desea crear el curso con la informacion establecida (S/N): ");
            op_crear = sc.nextLine().toUpperCase();
            
        }
        if ("S".equals(op_crear)){
        System.out.println("Se ha creado el curso:\n ");
        System.out.println("MATERIA: " + materia_);
        System.out.println("PROFESOR: " + profesor_);
        System.out.println("CAPACIDAD: " + capacidad);
        System.out.println("HORARIO: " + dia + " de " + horario);
        }
    }
    
    public void CrearProfesor() throws IOException{
        String op_crear="";
        String aux = "";
        String animal = "", pocion = "", deporte = "";
        String nombre = "", apellido = "", varita = "", fecha_ingreso = "";
        int edad = 0, tipo_mago = 0;
        
        try {
            FileReader leer = new FileReader(FileProfesores);
            FileWriter escribir = new FileWriter(FileProfesores);
            BufferedReader br = new BufferedReader(leer);

            while (!"S".equals(op_crear)) {
                
                System.out.println("/** CREAR PROFESOR **/");
                System.out.println("Ingrese Nombre: ");
                nombre = sc.nextLine();
                System.out.println("Ingrese Apellido: ");
                apellido = sc.nextLine();
                System.out.println("Ingrese Edad: ");
                edad = sc.nextInt();
                System.out.println("Varita: ");
                varita = sc.nextLine();
                System.out.println("Fecha de Ingreso: \n");
                fecha_ingreso = sc.nextLine();

                System.out.println("Tipos de Magos/Brujas");
                System.out.println("1.Animago");
                System.out.println("2.Metamorfomago");
                System.out.println("3.Estandar");
                System.out.println("Elija el tipo de mago/bruja que es: ");
                tipo_mago = sc.nextInt();

                switch (tipo_mago) {
                    case (1):
                        System.out.println("En que clase de animal puede convertirse: ");
                        animal = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + fecha_ingreso + "," + "A" + "," + animal + "," + "hechizo1" + "," + "null" + "," + "null";
                    case (2):
                        System.out.println("Que pocion utiliza: ");
                        pocion = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + fecha_ingreso + "," + "M" + "," + "null" + "," + "null" + "," + pocion + "," + "+null";
                    case (3):
                        System.out.println("Deporte: ");
                        deporte = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + fecha_ingreso + "," + "N" + "," + "null" + "," + "null" + "," + "+null" + "," + deporte;
                }

                System.out.println("Desea guardar los datos? S/N: ");
                op_crear = sc.nextLine().toUpperCase();
            }

            //Agregando los nombres de los profesores (sin repetir) a un array para poder imprimir
            String nombre_completo = nombre + " " + apellido;
            String bandera = "False";

            for (int x = 0; x < lista_profesores.size(); x++) { //comprobando si el nombre ya existe en el array
                if (lista_profesores.get(x).equals(nombre_completo)) {
                    bandera = "True";
                }
            }

            if (bandera == "False") {
                lista_profesores.add(nombre_completo);
            }

            escribir.write(aux);
            System.out.println("Sus datos se han guardado correctamente ");
            escribir.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public void CrearEstudiante() throws IOException{
        String op_crear="";
        String aux="";
        String animal = "", pocion = "", deporte = "";
        String nombre = "", apellido = "", varita = "", casa = "";
        int edad = 0, tipo_mago = 0;
     
        try {
            FileReader leer = new FileReader(FileEstudiantes);
            FileWriter escribir = new FileWriter(FileEstudiantes);
            BufferedReader br = new BufferedReader(leer);

            while (!"S".equals(op_crear)) {
                
                System.out.println("/** CREAR ESTUDIANTE **/");
                System.out.println("Ingrese Nombre: ");
                nombre = sc.nextLine();
                System.out.println("Ingrese Apellido: ");
                apellido = sc.nextLine();
                System.out.println("Ingrese Edad: ");
                edad = sc.nextInt();
                System.out.println("Varita: ");
                varita = sc.nextLine();
                System.out.println("Casa: \n");
                casa = sc.nextLine();

                System.out.println("Tipos de Magos/Brujas");
                System.out.println("1.Animago");
                System.out.println("2.Metamorfomago");
                System.out.println("3.Estandar");
                System.out.println("Elija el tipo de mago/bruja que es: ");
                tipo_mago = sc.nextInt();

                switch (tipo_mago) {
                    case (1):
                        System.out.println("En que clase de animal puede convertirse: ");
                        animal = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + casa + "," + "A";
                    case (2):
                        System.out.println("Que pocion utiliza: ");
                        pocion = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + casa + "," + "M";
                    case (3):
                        System.out.println("Deporte: ");
                        deporte = sc.nextLine();
                        aux = nombre + "," + apellido + "," + edad + "," + varita + "," + casa + "," + "N";
                }

                System.out.println("Desea guardar los datos? S/N: ");
                op_crear = sc.nextLine().toUpperCase();
            }
            
            String nombre_completo = nombre + " " + apellido;
            String bandera = "False";

            for (int x = 0; x < lista_profesores.size(); x++) { //comprobando si el nombre ya existe en el array
                if (lista_profesores.get(x).equals(nombre_completo)) {
                    bandera = "True";
                }
            }

            if (bandera == "False") {
                lista_estudiantes.add(nombre_completo);
            }

            escribir.write(aux);
            System.out.println("Sus datos se han guardado correctamente ");
            escribir.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public void VerHorariosPlanificados() throws FileNotFoundException, IOException{
        int op_listado;
        String materias="";
        
        System.out.println("/** CURSOS PLANIFICADOS **/");
        System.out.println("/** MATERIAS **/\n");
        ImprimirMaterias(); //aplicación del método imprimir materias
        System.out.println("Elija una materia del listado de materias: ");
        op_listado=sc.nextInt();
        
        materias = lista_materias.get(op_listado-1); //buscando en el arrayList
        
        try{
            FileReader leer= new FileReader(FileCursos);
            BufferedReader line= new BufferedReader(leer);
            
            while(line.ready()){
                String[] cursos=line.readLine().split(",");
                
                if(materias.equals(cursos[0])){
                    System.out.println("MATERIA: "+cursos[0]);
                    System.out.println("PROFESOR: "+cursos[1]);
                    System.out.println("HORARIO: "+cursos[3]);
                    System.out.println("REGISTRADOS: "+lista_estudiantes.size());
                }
            }
        }
        catch(FileNotFoundException ex){
         ex.printStackTrace();
        } 
    }
    
    public void ListadoEstudiantes() throws FileNotFoundException, IOException{
        int op_sort;
        String line="";
        
        System.out.println("/** LISTADO DE ESTUDIANTES **/");
        System.out.println("1. Edad\n2. Nombre\n3. Numero de materias registradas");
        System.out.println("Eliga el criterio para ordenar: ");
        op_sort=sc.nextInt();
        System.out.println(lista_estudiantes);
                
        FileReader reader=new FileReader("registro.txt");
        BufferedReader br= new BufferedReader(reader);
        
        for(Estudiante estudiante: lista_estudiantes){
            int n=0;
            while(null!=line){
                line= br.readLine();
                if (estudiante.apellido.equals(line.split(",")[2])){
                    n=n+1;
                    estudiante.setN_materias(n);    
                }
            }
        }
        
        reader.close();
        
        switch (op_sort) {
            case 1:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado = Integer.compare( a.edad, b.edad);
                    if ( resultado != 0 ) { return resultado; }
                    resultado = a.nombre.compareTo(b.nombre);
                    if ( resultado != 0 ) { return resultado; }
                    resultado = a.apellido.compareTo(b.apellido); 
                    if ( resultado != 0 ) { return resultado; }
                    return resultado;
                }
            });         
            case 2:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado = a.nombre.compareTo(b.nombre);
                    if (resultado != 0 ) {
                        return resultado;
                    }
                    resultado = a.apellido.compareTo(b.apellido);
                    if (resultado != 0 ) {
                        return resultado;
                    } else {
                        return a.apellido.compareTo(b.apellido);
                   }
                }
            });               
            case 3:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado =Integer.compare( a.n_materias, b.n_materias);
                    if (resultado != 0 ) {
                        return resultado;
                    }
                    resultado = a.nombre.compareTo(b.nombre);
                    if (resultado != 0 ) {
                        return resultado;
                    } else {
                        return a.nombre.compareTo(b.nombre);
                   }
                }
            });      
        }
    }    
}

