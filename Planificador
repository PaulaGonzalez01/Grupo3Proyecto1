/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_poo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/**
 *
 * @author E6530
 */
public class Planificador extends Persona{
    Scanner sc= new Scanner(System.in);
    static ArrayList<String> lista_materias = new ArrayList<>();
    static ArrayList<String> lista_profesores = new ArrayList<>();
    static ArrayList <Estudiante> lista_estudiantes= new ArrayList<>(); 
    
    int opcion;
    String materia;
    String fecha_ingreso;
    int tipo_mago;
    String profesor;
    
    static File FileCursos = new File ("Cursos.txt");
    static File FileUsuarios = new File ("Usuarios.txt");
    static File FileProfesores = new File ("Profesores.txt");
    static File FileEstudiantes = new File ("Estudiantes.txt");
    
    public Planificador(int opcion, String materia, String fecha_ingreso, 
            int tipo_mago, String profesor, String nombre, String apellido,
            int edad, String casa, String varita) {
        super(nombre, apellido, edad, casa, varita);
        this.opcion = opcion;
        this.materia = materia;
        this.fecha_ingreso = fecha_ingreso;
        this.tipo_mago = tipo_mago;
        this.profesor = profesor;
        
        lista_materias.add("Pociones");
        lista_materias.add("Defensa contra las artes oscuras");
        lista_materias.add("Adivinación");
        lista_materias.add("Astronomía");
        lista_materias.add("Historia de la Magia");
        lista_materias.add("Herbología");
        lista_materias.add("Encantamientos");
        lista_materias.add("Vuelo");
    }
    
    public void setOpcion(int opcion){
        this.opcion = opcion;
    }
    public void setMateria(String materia){
        this.materia = materia;
    }
    public void setFechaIngreso(String fecha_ingreso){
        this.fecha_ingreso = fecha_ingreso;
    }
    public void setTipoMago(int tipo_mago){
        this.tipo_mago = tipo_mago;
    }
    public void setProfesor(String profesor){
        this.profesor = profesor;
    }
    
    public int getOpcion(){
        return opcion;
    }
    public String getMateria(){
        return materia;
    }
    public String getFechaIngreso(){
        return fecha_ingreso;
    }
    public int getTipoMago(){
        return tipo_mago;
    }
    public String getProfesor(){
        return profesor;
    }
    
    
    //Imprimir el listado de profesores registrados en el archivo y guardados en arrayList
    public static void ImprimirProfesores(){
        String parte;
        
        for (int x = 0; x < lista_profesores.size(); x++){
            parte = lista_profesores.get(x);
            System.out.println((x+1)+". "+parte);
        }
    }
    
    //Imprimir el listado de materias
    public static void ImprimirMaterias(){
        String m;
        
        for (int x = 0; x < lista_materias.size(); x++){
            m = lista_materias.get(x);
            System.out.println((x+1)+". "+m);
        }
    }
    
    public void CrearCurso() throws FileNotFoundException, IOException{
        String op_crear="";
        int capacidad=0;
        String dia = "";
        String horario = "";
        String materia_ = "";
        String profesor_ = "";
        
        while(op_crear != "S"){
            int op_curso;
            int op_profesor;
            
            System.out.println("/** MATERIAS **/\n");
            ImprimirMaterias(); //aplicando método para imprimir materias
            System.out.println("Elija una materia del listado de materias: ");
            op_curso=sc.nextInt();
            
            while((op_curso>9) || (op_curso<1)){ 
                System.out.println("Elija una materia valida del listado de materias: ");
                op_curso=sc.nextInt(); 
            }
            
            System.out.println("/** PROFESORES **/\n");
            ImprimirProfesores(); //aplicando el método para imprimir los maestros
            System.out.println("Elija un profesor del listado de profesores: ");
            op_profesor=sc.nextInt();
            
            while((op_profesor<1)|| (op_profesor> lista_profesores.size())){
                System.out.println("Elija un profesor valido del listado de profesores: ");
                op_profesor=sc.nextInt();
            }
            
            //como se conoce la opcion ya sabemos la posicion de la variable en el arrayList
            profesor_ = lista_profesores.get(op_profesor - 1);
            materia_ = lista_materias.get(op_curso - 1);
            
            System.out.println("Ingrese la capacidad del curso "+materia_+": ");    
            capacidad=sc.nextInt();
            System.out.println("Ingrese el dia: ");
            dia=sc.nextLine();
            System.out.println("Ingrese el horario del curso: ");
            horario=sc.nextLine();
            
            //Condición del while
            System.out.println("Desea crear el curso con la informacion establecida (S/N): ");
            op_crear=sc.nextLine().toUpperCase();
        }
        
        String nuevo_registro = materia_+","+profesor_+","+dia+","+horario+","+capacidad;
        
        //Validación de si no se repite materia, dia, horario
        String registrado = null;
        try{
           FileReader leer = new FileReader (FileCursos);
           FileWriter escribir = new FileWriter (FileCursos);
           BufferedReader br = new BufferedReader(leer);
           String linea = br.readLine();
           
           while(linea != null){
               String partes[]=linea.split(",");
               String p_materia = partes[0];
               String p_dia = partes[1];
               String p_horario = partes[2];
               
               if (p_materia.equals(materia_) && p_dia.equals(dia) && p_horario.equals(horario)){
                escribir.write(nuevo_registro);
                registrado = "s";
                linea = null; 
               }else{
                   linea = br.readLine();
               }
           }   
           leer.close();
           escribir.close();
           
        }catch(IOException e){
            System.out.println("Error");
        }
        
        if ("s".equals(registrado)){
            System.out.println("Se ha creado el curso:\n ");
            System.out.println("MATERIA: "+materia_);
            System.out.println("PROFESOR: "+profesor_);
            System.out.println("CAPACIDAD: "+capacidad);
            System.out.println("HORARIO: " +dia+" de "+horario);
        }else if (registrado == null){
            System.out.println("No es posible crear el curso. ");
        }
        //¿mostramos la razón por la que el curso no se va a crear?
    }
    
    public void CrearProfesor() throws IOException{
        String op_crear="";
        String aux = "";
        String animal = "", pocion = "", deporte = "";
        
        FileReader leer = new FileReader (FileProfesores);
        FileWriter escribir = new FileWriter (FileProfesores);
        BufferedReader br = new BufferedReader(leer);
        //¿es necesario dejar el reader y buffered?
        
        System.out.println("/** CREAR PROFESOR **/");
        while(op_crear!="S"){
            
            System.out.println("Ingrese Nombre: ");
            nombre=sc.nextLine();
            System.out.println("Ingrese Apellido: ");
            apellido=sc.nextLine();
            System.out.println("Ingrese Edad: ");
            edad=sc.nextInt();
            System.out.println("Varita: ");
            varita=sc.nextLine();
            System.out.println("Fecha de Ingreso: \n");
            fecha_ingreso=sc.nextLine();
            
            System.out.println("Tipos de Magos/Brujas");
            System.out.println("1.Animago");
            System.out.println("2.Metamorfomago");
            System.out.println("3.Estandar");
            System.out.println("Elija el tipo de mago/bruja que es: ");
            tipo_mago = sc.nextInt();
            
            switch(tipo_mago){
                case(1):
                    System.out.println("En que clase de animal puede convertirse: ");
                    animal=sc.nextLine();
                    aux=nombre+","+apellido+","+edad+","+varita+","+fecha_ingreso+","+"A"+","+animal+","+"hechizo1"+","+"null"+","+"null";
                case(2):
                    System.out.println("Que pocion utiliza: ");
                    pocion=sc.nextLine();
                    aux=nombre+","+apellido+","+edad+","+varita+","+fecha_ingreso+","+"M"+","+"null"+","+"null"+","+pocion+","+"+null";
                case(3):
                    System.out.println("Deporte: ");
                    deporte=sc.nextLine();
                    aux=nombre+","+apellido+","+edad+","+varita+","+fecha_ingreso+","+"N"+","+"null"+","+"null"+","+"+null"+","+deporte;
            }
            
            System.out.println("Desea guardar los datos? S/N: ");
            op_crear=sc.nextLine().toUpperCase();
        }
        
        //Agregando los nombres de los profesores (sin repetir) a un array para poder imprimir
        String nombre_completo = nombre+" "+apellido;
        String bandera = "False";
        
        for (int x = 0; x < lista_profesores.size(); x++ ){ //comprobando si el nombre ya existe en el array
            if (lista_profesores.get(x).equals(nombre_completo)){
                bandera = "True";
            }
        }
        
        if (bandera == "False"){
            lista_profesores.add(nombre_completo);
        }
        
        escribir.write(aux);
        System.out.println("Sus datos se han guardado correctamente ");
        escribir.close();
    }
    
    public void CrearEstudiante() throws IOException{
        String op_crear="";
        String aux="";
        String animal="",pocion="", deporte="";
        int tipo_mago;
        
        FileWriter fw=null;
        File file=null;
        file=new File("Estudiantes.txt");
        fw= new FileWriter(file);
 
        System.out.println("/** CREAR ESTUDIANTE **/");
        while(op_crear!="S"){
            
            System.out.println("Ingrese Nombre: ");
            nombre=sc.nextLine();
            System.out.println("Ingrese Apellido: ");
            apellido=sc.nextLine();
            System.out.println("Ingrese Edad: ");
            edad=sc.nextInt();
            System.out.println("Varita: ");
            varita=sc.nextLine();
            System.out.println("Casa: ");
            casa=sc.nextLine();
            
            System.out.println("\nTipos de Magos/Brujas");
            System.out.println("1.Animago");
            System.out.println("2.Metamorfomago");
            System.out.println("3.Estandar");
            System.out.println("Elija el tipo de mago/bruja que es: ");
            tipo_mago=sc.nextInt();
            
            switch(tipo_mago){
                case(1):
                    aux=nombre+","+apellido+","+edad+","+varita+","+casa+","+"A";
                case(2):
                    aux=nombre+","+apellido+","+edad+","+varita+","+casa+","+"M";
                case(3):
                    aux=nombre+","+apellido+","+edad+","+varita+","+casa+","+"N";
            }
            
            System.out.println("Desea guardar los datos? S/N: ");
            op_crear=sc.nextLine().toUpperCase();
        }
        
        fw.write(aux);
        System.out.println("Sus datos se han guardado correctamente ");
        fw.close();
        
        //¿validar si no se repite el registro de un estudiante?
    }
    
    public void VerHorariosPlanificados() throws FileNotFoundException, IOException{
        int op_listado;
        String materias="";
        String filename="horarios_planificados.txt";
        String line= null;
        
        System.out.println("/** CURSOS PLANIFICADOS **/");
        System.out.println("/** MATERIAS **/\n");
        ImprimirMaterias(); //aplicación del método imprimir materias
        System.out.println("Elija una materia del listado de materias: ");
        op_listado=sc.nextInt();
        
        materias = lista_materias.get(op_listado); //buscando en el arrayList
        
        try{
            FileReader fileReader= new FileReader(filename);
            BufferedReader bufferedReader= new BufferedReader(fileReader);
            
            while((line=bufferedReader.readLine())!=null){
                String array1[]=line.split(",");
                
                if(materias.equals(array1[0])){
                    System.out.println("MATERIA: "+array1[0]);
                    System.out.println("PROFESOR: "+array1[1]);
                    System.out.println("CAPACIDAD: "+array1[2]);
                    System.out.println("HORARIO: "+array1[3]);
                }
            }
        }
        catch(FileNotFoundException ex){
         System.out.println("Error");   
        } 
    }
    
    public void ListadoEstudiantes() throws FileNotFoundException, IOException{
        int op_sort;
        String line="";
        
        System.out.println("/** LISTADO DE ESTUDIANTES **/");
        System.out.println("1. Edad\n2. Nombre\n3. Numero de materias registradas");
        System.out.println("Eliga el criterio para ordenar: ");
        op_sort=sc.nextInt();
        System.out.println(lista_estudiantes);
                
        FileReader reader=new FileReader("registro.txt");
        BufferedReader br= new BufferedReader(reader);
        
        for(Estudiante estudiante: lista_estudiantes){
            int n=0;
            while(null!=line){
                line= br.readLine();
                if (estudiante.apellido.equals(line.split(",")[2])){
                    n=n+1;
                    estudiante.setN_materias(n);    
                }
            }
        }
        
        reader.close();
        
        switch (op_sort) {
            case 1:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado = Integer.compare( a.edad, b.edad);
                    if ( resultado != 0 ) { return resultado; }
                    resultado = a.nombre.compareTo(b.nombre);
                    if ( resultado != 0 ) { return resultado; }
                    resultado = a.apellido.compareTo(b.apellido); 
                    if ( resultado != 0 ) { return resultado; }
                    return resultado;
                }
            });         
            case 2:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado = a.nombre.compareTo(b.nombre);
                    if (resultado != 0 ) {
                        return resultado;
                    }
                    resultado = a.apellido.compareTo(b.apellido);
                    if (resultado != 0 ) {
                        return resultado;
                    } else {
                        return a.apellido.compareTo(b.apellido);
                   }
                }
            });               
            case 3:
                Collections.sort(lista_estudiantes, new Comparator<Estudiante>() {
                @Override
                public int compare(Estudiante a, Estudiante b) {
                    int resultado =Integer.compare( a.n_materias, b.n_materias);
                    if (resultado != 0 ) {
                        return resultado;
                    }
                    resultado = a.nombre.compareTo(b.nombre);
                    if (resultado != 0 ) {
                        return resultado;
                    } else {
                        return a.nombre.compareTo(b.nombre);
                   }
                }
            });      
        }
    }
}
